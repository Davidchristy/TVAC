import socket               # Import socket module
import time
from threading import Thread
from time import sleep

keysight_internal_data = {}
def receive_all(sock):
    BUFF_SIZE = 4096  # 4 KiB
    data = b''
    while True:
        part = sock.recv(BUFF_SIZE)
        data += part
        if len(part) < BUFF_SIZE:
            # either 0 or end of data
            break
    return data

def process_system_cmds(data):
        if "TIME" in data.upper():
            if "?" in data:
                return keysight_internal_data["TIME"]
            else:
                keysight_internal_data.update({"TIME": data.split(" ")[1]})
                return ""
        if "DATE" in data.upper():
            return ""

def process_keysight_cmd(data):
    sub_systems = {"SYST": process_system_cmds,
                   }
    sub_system = data.split(":")[0]
    temp_func = sub_systems.get(sub_system, None)
    if not temp_func:
        if "*IDN?" in data:
            return "Agilent Technologies,34980A,MY12345678,1.00-1.00-2.00-1.00"
        return ""

    return sub_systems[sub_system](data)

class Keysight(Thread):

    def __init__(self):
        Thread.__init__(self, name="keysight")



    def run(self):
        while True:
            sleep_time = 0
            try:
                # raw_data = "+2.95369000E+02   K,00000000.064,1001,0,+2.94749000E+02   K,00000000.110,1002,0," \
                #            "+2.95268000E+02   K,00000000.156,1003,0,+2.95526000E+02   K,00000000.202,1004,0," \
                #            "+2.94952000E+02   K,00000000.248,1005,0,+2.95418000E+02   K,00000000.294,1006,0," \
                #            "+2.95514000E+02   K,00000000.340,1007,0,+2.95319000E+02   K,00000000.386,1008,0," \
                #            "+9.90000000E+37   K,00000000.429,1009,0,+9.90000000E+37   K,00000000.475,1010,0," \
                #            "+9.90000000E+37   K,00000000.519,1011,0,+9.90000000E+37   K,00000000.565,1012,0," \
                #            "+9.90000000E+37   K,00000000.609,1013,0,+9.90000000E+37   K,00000000.653,1014,0," \
                #            "+9.90000000E+37   K,00000000.697,1015,0,+9.90000000E+37   K,00000000.741,1016,0," \
                #            "+9.90000000E+37   K,00000000.785,1017,0,+9.90000000E+37   K,00000000.829,1018,0," \
                #            "+9.90000000E+37   K,00000000.874,1019,0,+9.90000000E+37   K,00000000.918,1020,0," \
                #            "+9.90000000E+37   K,00000000.963,1021,0,+9.90000000E+37   K,00000001.007,1022,0," \
                #            "+9.90000000E+37   K,00000001.051,1023,0,+9.90000000E+37   K,00000001.095,1024,0," \
                #            "+9.90000000E+37   K,00000001.138,1025,0,+9.90000000E+37   K,00000001.182,1026,0," \
                #            "+9.90000000E+37   K,00000001.226,1027,0,+9.90000000E+37   K,00000001.270,1028,0," \
                #            "+9.90000000E+37   K,00000001.314,1029,0,+9.90000000E+37   K,00000001.358,1030,0," \
                #            "+9.90000000E+37   K,00000001.402,1031,0,+9.90000000E+37   K,00000001.446,1032,0," \
                #            "+9.90000000E+37   K,00000001.490,1033,0,+9.90000000E+37   K,00000001.536,1034,0," \
                #            "+9.90000000E+37   K,00000001.580,1035,0,+9.90000000E+37   K,00000001.624,1036,0," \
                #            "+9.90000000E+37   K,00000001.668,1037,0,+9.90000000E+37   K,00000001.712,1038,0," \
                #            "+9.90000000E+37   K,00000001.755,1039,0,+9.90000000E+37   K,00000001.799,1040,0," \
                #            "+9.90000000E+37   K,00000001.844,2001,0,+9.90000000E+37   K,00000001.890,2002,0," \
                #            "+9.90000000E+37   K,00000001.934,2003,0,+9.90000000E+37   K,00000001.978,2004,0," \
                #            "+9.90000000E+37   K,00000002.021,2005,0,+9.90000000E+37   K,00000002.065,2006,0," \
                #            "+9.90000000E+37   K,00000002.109,2007,0,+9.90000000E+37   K,00000002.153,2008,0," \
                #            "+9.90000000E+37   K,00000002.197,2009,0,+9.90000000E+37   K,00000002.241,2010,0," \
                #            "+9.90000000E+37   K,00000002.287,2011,0,+9.90000000E+37   K,00000002.331,2012,0," \
                #            "+9.90000000E+37   K,00000002.377,2013,0,+9.90000000E+37   K,00000002.421,2014,0," \
                #            "+9.90000000E+37   K,00000002.465,2015,0,+9.90000000E+37   K,00000002.508,2016,0," \
                #            "+9.90000000E+37   K,00000002.554,2017,0,+9.90000000E+37   K,00000002.598,2018,0," \
                #            "+9.90000000E+37   K,00000002.642,2019,0,+9.90000000E+37   K,00000002.686,2020,0," \
                #            "+9.90000000E+37   K,00000002.730,2021,0,+9.90000000E+37   K,00000002.774,2022,0," \
                #            "+9.90000000E+37   K,00000002.818,2023,0,+9.90000000E+37   K,00000002.864,2024,0," \
                #            "+9.90000000E+37   K,00000002.910,2025,0,+9.90000000E+37   K,00000002.956,2026,0," \
                #            "+9.90000000E+37   K,00000003.000,2027,0,+9.90000000E+37   K,00000003.046,2028,0," \
                #            "+9.90000000E+37   K,00000003.092,2029,0,+9.90000000E+37   K,00000003.138,2030,0," \
                #            "+9.90000000E+37   K,00000003.184,2031,0,+9.90000000E+37   K,00000003.230,2032,0," \
                #            "+9.90000000E+37   K,00000003.276,2033,0,+9.90000000E+37   K,00000003.322,2034,0," \
                #            "+9.90000000E+37   K,00000003.368,2035,0,+2.95255000E+02   K,00000003.414,2036,0," \
                #            "+2.95054000E+02   K,00000003.460,2037,0,+2.95245000E+02   K,00000003.506,2038,0," \
                #            "+2.95069000E+02   K,00000003.552,2039,0,+2.95168000E+02   K,00000003.598,2040,0," \
                #            "+2.95377000E+02   K,00000003.645,3001,0,+2.95529000E+02   K,00000003.691,3002,0," \
                #            "+2.95790000E+02   K,00000003.737,3003,0,+2.95425000E+02   K,00000003.783,3004,0," \
                #            "+2.94614000E+02   K,00000003.829,3005,0,+2.94641000E+02   K,00000003.875,3006,0," \
                #            "+2.94629000E+02   K,00000003.921,3007,0,+2.94645000E+02   K,00000003.967,3008,0," \
                #            "+9.90000000E+37   K,00000004.010,3009,0,+9.90000000E+37   K,00000004.056,3010,0," \
                #            "+2.95879000E+02   K,00000004.102,3011,0,+2.95773000E+02   K,00000004.148,3012,0," \
                #            "+9.90000000E+37   K,00000004.192,3013,0,+9.90000000E+37   K,00000004.238,3014,0," \
                #            "+9.90000000E+37   K,00000004.282,3015,0,+2.95976000E+02   K,00000004.328,3016,0," \
                #            "+2.95911000E+02   K,00000004.374,3017,0,+2.95607000E+02   K,00000004.420,3018,0," \
                #            "+2.95440000E+02   K,00000004.466,3019,0,+2.95790000E+02   K,00000004.512,3020,0," \
                #            "+2.96102000E+02   K,00000004.558,3021,0,+2.96259000E+02   K,00000004.604,3022,0," \
                #            "+2.96106000E+02   K,00000004.650,3023,0,+2.96148000E+02   K,00000004.696,3024,0," \
                #            "+2.96119000E+02   K,00000004.742,3025,0,+2.96034000E+02   K,00000004.788,3026,0," \
                #            "+2.96075000E+02   K,00000004.834,3027,0,+2.95684000E+02   K,00000004.880,3028,0," \
                #            "+2.95512000E+02   K,00000004.926,3029,0,+2.95870000E+02   K,00000004.972,3030,0," \
                #            "+2.95904000E+02   K,00000005.018,3031,0,+2.96077000E+02   K,00000005.064,3032,0," \
                #            "+2.95450000E+02   K,00000005.110,3033,0,+2.95476000E+02   K,00000005.156,3034,0," \
                #            "+2.95744000E+02   K,00000005.202,3035,0,+2.96080000E+02   K,00000005.248,3036,0," \
                #            "+2.96063000E+02   K,00000005.294,3037,0,+2.95708000E+02   K,00000005.340,3038,0," \
                #            "+2.95725000E+02   K,00000005.386,3039,0,+2.95916000E+02   K,00000005.436,3040,0"
                #
                # set_1_raw_data = "+2.95369000E+02   K,00000000.064,1001,0,+2.94749000E+02   K,00000000.110,1002,0," \
                #                  "+2.95268000E+02   K,00000000.156,1003,0,+2.95526000E+02   K,00000000.202,1004,0," \
                #                  "+2.94952000E+02   K,00000000.248,1005,0,+2.95418000E+02   K,00000000.294,1006,0," \
                #                  "+2.95514000E+02   K,00000000.340,1007,0,+2.95319000E+02   K,00000000.386,1008,0," \
                #                  "+9.90000000E+37   K,00000000.429,1009,0,+9.90000000E+37   K,00000000.475,1010,0," \
                #                  "+9.90000000E+37   K,00000000.519,1011,0,+9.90000000E+37   K,00000000.565,1012,0," \
                #                  "+9.90000000E+37   K,00000000.609,1013,0,+9.90000000E+37   K,00000000.653,1014,0," \
                #                  "+9.90000000E+37   K,00000000.697,1015,0,+9.90000000E+37   K,00000000.741,1016,0," \
                #                  "+9.90000000E+37   K,00000000.785,1017,0,+9.90000000E+37   K,00000000.829,1018,0," \
                #                  "+9.90000000E+37   K,00000000.874,1019,0,+9.90000000E+37   K,00000000.918,1020,0," \
                #                  "+9.90000000E+37   K,00000000.963,1021,0,+9.90000000E+37   K,00000001.007,1022,0," \
                #                  "+9.90000000E+37   K,00000001.051,1023,0,+9.90000000E+37   K,00000001.095,1024,0," \
                #                  "+9.90000000E+37   K,00000001.138,1025,0,+9.90000000E+37   K,00000001.182,1026,0," \
                #                  "+9.90000000E+37   K,00000001.226,1027,0,+9.90000000E+37   K,00000001.270,1028,0," \
                #                  "+9.90000000E+37   K,00000001.314,1029,0,+9.90000000E+37   K,00000001.358,1030,0," \
                #                  "+9.90000000E+37   K,00000001.402,1031,0,+9.90000000E+37   K,00000001.446,1032,0," \
                #                  "+9.90000000E+37   K,00000001.490,1033,0,+9.90000000E+37   K,00000001.536,1034,0," \
                #                  "+9.90000000E+37   K,00000001.580,1035,0,+9.90000000E+37   K,00000001.624,1036,0," \
                #                  "+9.90000000E+37   K,00000001.668,1037,0,+9.90000000E+37   K,00000001.712,1038,0," \
                #                  "+9.90000000E+37   K,00000001.755,1039,0,+9.90000000E+37   K,00000001.799,1040,0"
                #
                # set_2_raw_data = "+9.90000000E+37   K,00000001.844,2001,0,+9.90000000E+37   K,00000001.890,2002,0," \
                #                  "+9.90000000E+37   K,00000001.934,2003,0,+9.90000000E+37   K,00000001.978,2004,0," \
                #                  "+9.90000000E+37   K,00000002.021,2005,0,+9.90000000E+37   K,00000002.065,2006,0," \
                #                  "+9.90000000E+37   K,00000002.109,2007,0,+9.90000000E+37   K,00000002.153,2008,0," \
                #                  "+9.90000000E+37   K,00000002.197,2009,0,+9.90000000E+37   K,00000002.241,2010,0," \
                #                  "+9.90000000E+37   K,00000002.287,2011,0,+9.90000000E+37   K,00000002.331,2012,0," \
                #                  "+9.90000000E+37   K,00000002.377,2013,0,+9.90000000E+37   K,00000002.421,2014,0," \
                #                  "+9.90000000E+37   K,00000002.465,2015,0,+9.90000000E+37   K,00000002.508,2016,0," \
                #                  "+9.90000000E+37   K,00000002.554,2017,0,+9.90000000E+37   K,00000002.598,2018,0," \
                #                  "+9.90000000E+37   K,00000002.642,2019,0,+9.90000000E+37   K,00000002.686,2020,0," \
                #                  "+9.90000000E+37   K,00000002.730,2021,0,+9.90000000E+37   K,00000002.774,2022,0," \
                #                  "+9.90000000E+37   K,00000002.818,2023,0,+9.90000000E+37   K,00000002.864,2024,0," \
                #                  "+9.90000000E+37   K,00000002.910,2025,0,+9.90000000E+37   K,00000002.956,2026,0," \
                #                  "+9.90000000E+37   K,00000003.000,2027,0,+9.90000000E+37   K,00000003.046,2028,0," \
                #                  "+9.90000000E+37   K,00000003.092,2029,0,+9.90000000E+37   K,00000003.138,2030,0," \
                #                  "+9.90000000E+37   K,00000003.184,2031,0,+9.90000000E+37   K,00000003.230,2032,0," \
                #                  "+9.90000000E+37   K,00000003.276,2033,0,+9.90000000E+37   K,00000003.322,2034,0," \
                #                  "+9.90000000E+37   K,00000003.368,2035,0,+2.95255000E+02   K,00000003.414,2036,0," \
                #                  "+2.95054000E+02   K,00000003.460,2037,0,+2.95245000E+02   K,00000003.506,2038,0," \
                #                  "+2.95069000E+02   K,00000003.552,2039,0,+2.95168000E+02   K,00000003.598,2040,0"
                #
                # set_3_raw_data = "+2.95377000E+02   K,00000003.645,3001,0,+2.95529000E+02   K,00000003.691,3002,0," \
                #                  "+2.95790000E+02   K,00000003.737,3003,0,+2.95425000E+02   K,00000003.783,3004,0," \
                #                  "+2.94614000E+02   K,00000003.829,3005,0,+2.94641000E+02   K,00000003.875,3006,0," \
                #                  "+2.94629000E+02   K,00000003.921,3007,0,+2.94645000E+02   K,00000003.967,3008,0," \
                #                  "+9.90000000E+37   K,00000004.010,3009,0,+9.90000000E+37   K,00000004.056,3010,0," \
                #                  "+2.95879000E+02   K,00000004.102,3011,0,+2.95773000E+02   K,00000004.148,3012,0," \
                #                  "+9.90000000E+37   K,00000004.192,3013,0,+9.90000000E+37   K,00000004.238,3014,0," \
                #                  "+9.90000000E+37   K,00000004.282,3015,0,+2.95976000E+02   K,00000004.328,3016,0," \
                #                  "+2.95911000E+02   K,00000004.374,3017,0,+2.95607000E+02   K,00000004.420,3018,0," \
                #                  "+2.95440000E+02   K,00000004.466,3019,0,+2.95790000E+02   K,00000004.512,3020,0," \
                #                  "+2.96102000E+02   K,00000004.558,3021,0,+2.96259000E+02   K,00000004.604,3022,0," \
                #                  "+2.96106000E+02   K,00000004.650,3023,0,+2.96148000E+02   K,00000004.696,3024,0," \
                #                  "+2.96119000E+02   K,00000004.742,3025,0,+2.96034000E+02   K,00000004.788,3026,0," \
                #                  "+2.96075000E+02   K,00000004.834,3027,0,+2.95684000E+02   K,00000004.880,3028,0," \
                #                  "+2.95512000E+02   K,00000004.926,3029,0,+2.95870000E+02   K,00000004.972,3030,0," \
                #                  "+2.95904000E+02   K,00000005.018,3031,0,+2.96077000E+02   K,00000005.064,3032,0," \
                #                  "+2.95450000E+02   K,00000005.110,3033,0,+2.95476000E+02   K,00000005.156,3034,0," \
                #                  "+2.95744000E+02   K,00000005.202,3035,0,+2.96080000E+02   K,00000005.248,3036,0," \
                #                  "+2.96063000E+02   K,00000005.294,3037,0,+2.95708000E+02   K,00000005.340,3038,0," \
                #                  "+2.95725000E+02   K,00000005.386,3039,0,+2.95916000E+02   K,00000005.436,3040,0"

                prompt = "Tharsis> "


                s = socket.socket()  # Create a socket object
                port = 5024  # Reserve a port for your service.
                s.bind(('', port))  # Bind to the port

                print("KeySight: Waiting for connection")
                s.listen(5)  # Now wait for client connection.
                c, addr = s.accept()  # Establish connection with client.
                print('KeySight: Got connection from', addr)
                c.send(prompt.encode())
                while True:
                    data = receive_all(c).decode()
                    print("KeySight: Data received: '{}'".format(data.strip()))

                    reply = process_keysight_cmd(data)
                    if not reply:
                        reply = ""
                    final_reply = reply + prompt
                    # print("Reply: '{}'".format(final_reply))

                    c.send(final_reply.encode())

                    # if "READ?" in data:
                    #     send_temps(data)

                    time.sleep(.1)
            except Exception as e:
                print(e)
                sleep_time += 1
                sleep_time = sleep_time % 5
                time.sleep(1*sleep_time)


        # end loop
    # end run()